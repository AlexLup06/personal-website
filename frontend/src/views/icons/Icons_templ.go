// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package icons

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layers() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<svg class=\"w-full h-full\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M4.97883 9.68508C2.99294 8.89073 2 8.49355 2 8C2 7.50645 2.99294 7.10927 4.97883 6.31492L7.7873 5.19153C9.77318 4.39718 10.7661 4 12 4C13.2339 4 14.2268 4.39718 16.2127 5.19153L19.0212 6.31492C21.0071 7.10927 22 7.50645 22 8C22 8.49355 21.0071 8.89073 19.0212 9.68508L16.2127 10.8085C14.2268 11.6028 13.2339 12 12 12C10.7661 12 9.77318 11.6028 7.7873 10.8085L4.97883 9.68508Z\" stroke=\"#1C274C\" stroke-width=\"1.5\"></path> <path d=\"M5.76613 10L4.97883 10.3149C2.99294 11.1093 2 11.5065 2 12C2 12.4935 2.99294 12.8907 4.97883 13.6851L7.7873 14.8085C9.77318 15.6028 10.7661 16 12 16C13.2339 16 14.2268 15.6028 16.2127 14.8085L19.0212 13.6851C21.0071 12.8907 22 12.4935 22 12C22 11.5065 21.0071 11.1093 19.0212 10.3149L18.2339 10\" stroke=\"#1C274C\" stroke-width=\"1.5\"></path> <path d=\"M5.76613 14L4.97883 14.3149C2.99294 15.1093 2 15.5065 2 16C2 16.4935 2.99294 16.8907 4.97883 17.6851L7.7873 18.8085C9.77318 19.6028 10.7661 20 12 20C13.2339 20 14.2268 19.6028 16.2127 18.8085L19.0212 17.6851C21.0071 16.8907 22 16.4935 22 16C22 15.5065 21.0071 15.1093 19.0212 14.3149L18.2339 14\" stroke=\"#1C274C\" stroke-width=\"1.5\"></path></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Atoms() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<svg class=\"w-full h-full\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20.9423 3.05768C23.4117 5.52701 21.4099 11.5324 16.4712 16.4711C11.5326 21.4097 5.5272 23.4115 3.05787 20.9422C0.588547 18.4728 2.59033 12.4675 7.52899 7.5288C12.4676 2.59014 18.473 0.588345 20.9423 3.05768ZM3.05768 3.05782C0.588349 5.52715 2.59013 11.5325 7.52879 16.4712C12.4674 21.4099 18.4728 23.4117 20.9421 20.9423C23.4115 18.473 21.4097 12.4676 16.471 7.52894C11.5324 2.59028 5.527 0.588485 3.05768 3.05782Z\" stroke=\"#1C274C\" stroke-width=\"1.5\"></path> <path d=\"M14.5 12C14.5 13.3807 13.3807 14.5 12 14.5C10.6193 14.5 9.5 13.3807 9.5 12C9.5 10.6193 10.6193 9.5 12 9.5C13.3807 9.5 14.5 10.6193 14.5 12Z\" stroke=\"#1C274C\" stroke-width=\"1.5\"></path></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func CloudServer() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<svg class=\"w-full h-full\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13 21.75C13.4142 21.75 13.75 21.4142 13.75 21C13.75 20.5858 13.4142 20.25 13 20.25V21.75ZM3.17157 19.8284L3.7019 19.2981H3.7019L3.17157 19.8284ZM20.8284 4.17157L20.2981 4.7019V4.7019L20.8284 4.17157ZM21.25 13C21.25 13.4142 21.5858 13.75 22 13.75C22.4142 13.75 22.75 13.4142 22.75 13H21.25ZM10 3.75H14V2.25H10V3.75ZM2.75 13V12H1.25V13H2.75ZM2.75 12V11H1.25V12H2.75ZM13 20.25H10V21.75H13V20.25ZM21.25 11V12H22.75V11H21.25ZM1.25 13C1.25 14.8644 1.24841 16.3382 1.40313 17.489C1.56076 18.6614 1.89288 19.6104 2.64124 20.3588L3.7019 19.2981C3.27869 18.8749 3.02502 18.2952 2.88976 17.2892C2.75159 16.2615 2.75 14.9068 2.75 13H1.25ZM10 20.25C8.09318 20.25 6.73851 20.2484 5.71085 20.1102C4.70476 19.975 4.12511 19.7213 3.7019 19.2981L2.64124 20.3588C3.38961 21.1071 4.33855 21.4392 5.51098 21.5969C6.66182 21.7516 8.13558 21.75 10 21.75V20.25ZM14 3.75C15.9068 3.75 17.2615 3.75159 18.2892 3.88976C19.2952 4.02502 19.8749 4.27869 20.2981 4.7019L21.3588 3.64124C20.6104 2.89288 19.6614 2.56076 18.489 2.40313C17.3382 2.24841 15.8644 2.25 14 2.25V3.75ZM22.75 11C22.75 9.13558 22.7516 7.66182 22.5969 6.51098C22.4392 5.33855 22.1071 4.38961 21.3588 3.64124L20.2981 4.7019C20.7213 5.12511 20.975 5.70476 21.1102 6.71085C21.2484 7.73851 21.25 9.09318 21.25 11H22.75ZM10 2.25C8.13558 2.25 6.66182 2.24841 5.51098 2.40313C4.33856 2.56076 3.38961 2.89288 2.64124 3.64124L3.7019 4.7019C4.12511 4.27869 4.70476 4.02502 5.71085 3.88976C6.73851 3.75159 8.09318 3.75 10 3.75V2.25ZM2.75 11C2.75 9.09318 2.75159 7.73851 2.88976 6.71085C3.02502 5.70476 3.27869 5.12511 3.7019 4.7019L2.64124 3.64124C1.89288 4.38961 1.56076 5.33855 1.40313 6.51098C1.24841 7.66182 1.25 9.13558 1.25 11H2.75ZM2 12.75H22V11.25H2V12.75ZM21.25 12V13H22.75V12H21.25Z\" fill=\"#1C274C\"></path> <path d=\"M13.5 7.5L18 7.5\" stroke=\"#1C274C\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path> <path d=\"M6 17.5L6 15.5\" stroke=\"#1C274C\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path> <path d=\"M6 8.5L6 6.5\" stroke=\"#1C274C\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path> <path d=\"M9 17.5L9 15.5\" stroke=\"#1C274C\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path> <path d=\"M9 8.5L9 6.5\" stroke=\"#1C274C\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path> <path d=\"M19.3333 16.8852C19.5419 16.8072 19.7662 16.7647 20 16.7647C20.2291 16.7647 20.4493 16.8055 20.6543 16.8806M16.7907 17.8533C16.6966 17.8338 16.5994 17.8235 16.5 17.8235C15.6716 17.8235 15 18.5346 15 19.4118C15 20.2889 15.6716 21 16.5 21H20C21.1046 21 22 20.0519 22 18.8824C22 17.9554 21.4375 17.1676 20.6543 16.8806M16.7907 17.8533C16.7105 17.6242 16.6667 17.3763 16.6667 17.1176C16.6667 15.9481 17.5621 15 18.6667 15C19.6956 15 20.543 15.8226 20.6543 16.8806M16.7907 17.8533C16.9882 17.8944 17.1718 17.9765 17.3333 18.091\" stroke=\"#1C274C\" stroke-width=\"1.5\" stroke-linecap=\"round\"></path></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func LinkedIn() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M 21.800781 0 L 2.199219 0 C 1 0 0 1 0 2.199219 L 0 21.800781 C 0 23 1 24 2.199219 24 L 21.800781 24 C 23 24 24 23 24 21.800781 L 24 2.199219 C 24 1 23 0 21.800781 0 Z M 7 20 L 3 20 L 3 9 L 7 9 Z M 5 7.699219 C 3.800781 7.699219 3 6.898438 3 5.898438 C 3 4.800781 3.800781 4 5 4 C 6.199219 4 7 4.800781 7 5.800781 C 7 6.898438 6.199219 7.699219 5 7.699219 Z M 21 20 L 17 20 L 17 14 C 17 12.398438 15.898438 12 15.601563 12 C 15.300781 12 14 12.199219 14 14 C 14 14.199219 14 20 14 20 L 10 20 L 10 9 L 14 9 L 14 10.601563 C 14.601563 9.699219 15.601563 9 17.5 9 C 19.398438 9 21 10.5 21 14 Z\"></path></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Twitter() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"w-full h-full\" viewBox=\"0 0 1483 1483\" version=\"1.1\"><path d=\"M 304.292 302.750 C 307.279 307.012, 376.455 407.700, 458.017 526.500 C 539.579 645.300, 615.016 755.165, 625.656 770.645 C 636.295 786.125, 645 799.101, 645 799.481 C 645 799.861, 641.038 804.746, 636.196 810.336 C 631.354 815.926, 617.715 831.750, 605.889 845.500 C 594.062 859.250, 574.125 882.425, 561.584 897 C 549.044 911.575, 526.982 937.225, 512.557 954 C 498.133 970.775, 472.194 1000.934, 454.915 1021.020 C 401.474 1083.146, 393.762 1092.119, 353.081 1139.500 C 331.359 1164.800, 310.529 1188.990, 306.793 1193.256 C 303.057 1197.522, 300 1201.460, 300 1202.006 C 300 1202.647, 313.644 1203, 338.441 1203 L 376.881 1203 419.142 1153.750 C 442.386 1126.662, 465.315 1100, 470.095 1094.500 C 480.432 1082.608, 559.262 990.885, 565.888 983.040 C 568.425 980.037, 572.110 975.762, 574.077 973.540 C 576.045 971.318, 591.554 953.300, 608.542 933.500 C 625.529 913.700, 639.895 897.015, 640.464 896.422 C 641.034 895.830, 650.027 885.367, 660.449 873.172 C 670.871 860.978, 679.720 851, 680.113 851 C 680.507 851, 734.043 928.513, 799.084 1023.250 C 864.124 1117.987, 918.500 1197.178, 919.920 1199.229 L 922.500 1202.957 1054.357 1202.979 C 1162.791 1202.996, 1186.125 1202.767, 1185.710 1201.687 C 1185.270 1200.539, 1122.096 1108.393, 960.025 872.500 C 843.352 702.684, 827.838 679.864, 828.283 678.706 C 828.715 677.580, 844.607 658.993, 949.085 537.417 C 967.007 516.563, 991.712 487.800, 1003.985 473.500 C 1016.258 459.200, 1028.650 444.800, 1031.522 441.500 C 1034.394 438.200, 1049.496 420.650, 1065.082 402.500 C 1080.667 384.350, 1107.162 353.510, 1123.960 333.967 C 1140.757 314.424, 1155.118 297.662, 1155.872 296.717 C 1157.165 295.100, 1154.969 295, 1118.199 295 L 1079.154 295 1061.788 315.250 C 1038.675 342.200, 996.894 390.799, 985.030 404.532 C 979.789 410.600, 973.250 418.226, 970.500 421.478 C 967.750 424.730, 962.324 431.015, 958.443 435.445 C 954.562 439.875, 935.003 462.625, 914.978 486 C 894.954 509.375, 878.296 528.725, 877.960 529 C 877.625 529.275, 873.334 534.252, 868.425 540.061 C 859.839 550.221, 851.101 560.391, 811.027 606.865 C 793.437 627.265, 792.535 628.141, 791.052 626.266 C 790.199 625.186, 738.650 550.213, 676.500 459.661 L 563.500 295.021 431.181 295.010 L 298.862 295 304.292 302.750 M 407.565 356.742 C 408.559 358.259, 433.281 393.700, 462.504 435.500 C 517.927 514.776, 735.717 826.486, 875.781 1027 C 920.539 1091.075, 957.705 1144.066, 958.373 1144.758 C 959.327 1145.747, 972.359 1145.961, 1019.267 1145.758 L 1078.947 1145.500 922.776 922 C 836.881 799.075, 712.520 621.100, 646.418 526.500 L 526.232 354.500 465.996 354.242 L 405.760 353.984 407.565 356.742\" stroke=\"none\" fill=\"#fafafa\" fill-rule=\"evenodd\"></path><path d=\"M 0 741.501 L 0 1483.001 741.750 1482.751 L 1483.500 1482.500 1483.751 741.250 L 1484.001 0 742.001 0 L 0 0 0 741.501 M 0.497 742 C 0.497 1149.825, 0.611 1316.662, 0.750 1112.750 C 0.889 908.837, 0.889 575.162, 0.750 371.250 C 0.611 167.337, 0.497 334.175, 0.497 742 M 304.292 302.750 C 307.279 307.012, 376.455 407.700, 458.017 526.500 C 539.579 645.300, 615.016 755.165, 625.656 770.645 C 636.295 786.125, 645 799.101, 645 799.481 C 645 799.861, 641.038 804.746, 636.196 810.336 C 631.354 815.926, 617.715 831.750, 605.889 845.500 C 594.062 859.250, 574.125 882.425, 561.584 897 C 549.044 911.575, 526.982 937.225, 512.557 954 C 498.133 970.775, 472.194 1000.934, 454.915 1021.020 C 401.474 1083.146, 393.762 1092.119, 353.081 1139.500 C 331.359 1164.800, 310.529 1188.990, 306.793 1193.256 C 303.057 1197.522, 300 1201.460, 300 1202.006 C 300 1202.647, 313.644 1203, 338.441 1203 L 376.881 1203 419.142 1153.750 C 442.386 1126.662, 465.315 1100, 470.095 1094.500 C 480.432 1082.608, 559.262 990.885, 565.888 983.040 C 568.425 980.037, 572.110 975.762, 574.077 973.540 C 576.045 971.318, 591.554 953.300, 608.542 933.500 C 625.529 913.700, 639.895 897.015, 640.464 896.422 C 641.034 895.830, 650.027 885.367, 660.449 873.172 C 670.871 860.978, 679.720 851, 680.113 851 C 680.507 851, 734.043 928.513, 799.084 1023.250 C 864.124 1117.987, 918.500 1197.178, 919.920 1199.229 L 922.500 1202.957 1054.357 1202.979 C 1162.791 1202.996, 1186.125 1202.767, 1185.710 1201.687 C 1185.270 1200.539, 1122.096 1108.393, 960.025 872.500 C 843.352 702.684, 827.838 679.864, 828.283 678.706 C 828.715 677.580, 844.607 658.993, 949.085 537.417 C 967.007 516.563, 991.712 487.800, 1003.985 473.500 C 1016.258 459.200, 1028.650 444.800, 1031.522 441.500 C 1034.394 438.200, 1049.496 420.650, 1065.082 402.500 C 1080.667 384.350, 1107.162 353.510, 1123.960 333.967 C 1140.757 314.424, 1155.118 297.662, 1155.872 296.717 C 1157.165 295.100, 1154.969 295, 1118.199 295 L 1079.154 295 1061.788 315.250 C 1038.675 342.200, 996.894 390.799, 985.030 404.532 C 979.789 410.600, 973.250 418.226, 970.500 421.478 C 967.750 424.730, 962.324 431.015, 958.443 435.445 C 954.562 439.875, 935.003 462.625, 914.978 486 C 894.954 509.375, 878.296 528.725, 877.960 529 C 877.625 529.275, 873.334 534.252, 868.425 540.061 C 859.839 550.221, 851.101 560.391, 811.027 606.865 C 793.437 627.265, 792.535 628.141, 791.052 626.266 C 790.199 625.186, 738.650 550.213, 676.500 459.661 L 563.500 295.021 431.181 295.010 L 298.862 295 304.292 302.750 M 407.565 356.742 C 408.559 358.259, 433.281 393.700, 462.504 435.500 C 517.927 514.776, 735.717 826.486, 875.781 1027 C 920.539 1091.075, 957.705 1144.066, 958.373 1144.758 C 959.327 1145.747, 972.359 1145.961, 1019.267 1145.758 L 1078.947 1145.500 922.776 922 C 836.881 799.075, 712.520 621.100, 646.418 526.500 L 526.232 354.500 465.996 354.242 L 405.760 353.984 407.565 356.742\" stroke=\"none\" fill=\"#040404\" fill-rule=\"evenodd\"></path></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Github() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<svg class=\"w-full h-full\" viewBox=\"0 0 1024 1024\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z\" transform=\"scale(64)\" fill=\"#1B1F23\"></path></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
